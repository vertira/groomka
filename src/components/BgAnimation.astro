---
---
<script>
    const canvas = document.getElementById('nokey') as HTMLCanvasElement;
let can_w = parseInt(canvas.getAttribute('width')!);
let can_h = parseInt(canvas.getAttribute('height')!);
const ctx = canvas.getContext('2d')!;

const BONE_NUM = 10;

interface Bone {
  x: number;
  y: number;
  vx: number;
  vy: number;
  alpha: number;
  phase: number;
  type?: string;
}

const boneColor = {
  r: 255,
  g: 192,
  b: 203
};

const BONE_LENGTH = 50;
const BONE_WIDTH = 20;
let bones: Bone[] = [];
const alpha_f = 0.01;

const link_line_width = 0.5;
const dis_limit = 200;
let mouse_in = false;

const mouse_bone: Bone = {
  x: 0,
  y: 0,
  vx: 0,
  vy: 0,
  alpha: 1,
  phase: 0,
  type: 'mouse'
};

function getRandomSpeed(pos: string): [number, number] {
  const min = -0.7;
  const max = 0.7;
  switch (pos) {
    case 'top':
      return [randomNumFrom(min, max), randomNumFrom(0.1, max)];
    case 'right':
      return [randomNumFrom(min, -0.1), randomNumFrom(min, max)];
    case 'bottom':
      return [randomNumFrom(min, max), randomNumFrom(min, -0.1)];
    case 'left':
      return [randomNumFrom(0.1, max), randomNumFrom(min, max)];
    default:
      return [0, 0];
  }
}

function randomArrayItem<T>(arr: T[]): T {
  return arr[Math.floor(Math.random() * arr.length)];
}

function randomNumFrom(min: number, max: number): number {
  return Math.random() * (max - min) + min;
}

function getRandomBone(): Bone {
  const pos = randomArrayItem(['top', 'right', 'bottom', 'left']);
  switch (pos) {
    case 'top':
      return {
        x: randomSidePos(can_w),
        y: -BONE_LENGTH,
        vx: getRandomSpeed('top')[0],
        vy: getRandomSpeed('top')[1],
        alpha: 1,
        phase: randomNumFrom(0, 10)
      };
    case 'right':
      return {
        x: can_w + BONE_LENGTH,
        y: randomSidePos(can_h),
        vx: getRandomSpeed('right')[0],
        vy: getRandomSpeed('right')[1],
        alpha: 1,
        phase: randomNumFrom(0, 10)
      };
    case 'bottom':
      return {
        x: randomSidePos(can_w),
        y: can_h + BONE_LENGTH,
        vx: getRandomSpeed('bottom')[0],
        vy: getRandomSpeed('bottom')[1],
        alpha: 1,
        phase: randomNumFrom(0, 10)
      };
    case 'left':
      return {
        x: -BONE_LENGTH,
        y: randomSidePos(can_h),
        vx: getRandomSpeed('left')[0],
        vy: getRandomSpeed('left')[1],
        alpha: 1,
        phase: randomNumFrom(0, 10)
      };
      default:
      return {
        x: 0,
        y: 0,
        vx: 0,
        vy: 0,
        alpha: 1,
        phase: 0
      };
  }
}

function randomSidePos(length: number): number {
  return Math.ceil(Math.random() * length);
}

function drawBone(x: number, y: number, alpha: number): void {
  const radius = BONE_WIDTH / 2;
  ctx.fillStyle = `rgba(${boneColor.r},${boneColor.g},${boneColor.b},${alpha})`;
  ctx.beginPath();

  // Draw left circles
  ctx.arc(x - BONE_LENGTH / 2, y - radius, radius, 0, Math.PI * 2);
  ctx.arc(x - BONE_LENGTH / 2, y + radius, radius, 0, Math.PI * 2);
 

  // Draw right circles
  ctx.arc(x + BONE_LENGTH / 2, y - radius, radius - 0.5, 0, Math.PI * 2);
  ctx.arc(x + BONE_LENGTH / 2, y + radius, radius, -1, Math.PI * 2);

  // Draw center rectangle
  ctx.rect(x - BONE_LENGTH / 2, y - radius, BONE_LENGTH, BONE_WIDTH);
  ctx.rect(x - BONE_LENGTH / 2, y - radius, BONE_LENGTH, BONE_WIDTH);

  ctx.closePath();
  ctx.fill();
}

function renderBones(): void {
  bones.forEach(b => {
    if (!b.hasOwnProperty('type')) {
      drawBone(b.x, b.y, b.alpha);
    }
  });
}

function updateBones(): void {
  const newBones: Bone[] = [];
  bones.forEach(b => {
    b.x += b.vx;
    b.y += b.vy;

    if (b.x > -BONE_LENGTH && b.x < can_w + BONE_LENGTH && b.y > -BONE_LENGTH && b.y < can_h + BONE_LENGTH) {
      newBones.push(b);
    }

    b.phase += alpha_f;
    b.alpha = Math.abs(Math.cos(b.phase));
  });

  bones = newBones.slice(0);
}

function renderLines(): void {
  let fraction: number, alpha: string;
  for (let i = 0; i < bones.length; i++) {
    for (let j = i + 1; j < bones.length; j++) {
      fraction = getDisOf(bones[i], bones[j]) / dis_limit;

      if (fraction < 1) {
        alpha = (1 - fraction).toString();

        ctx.strokeStyle = `rgba(150,150,150,${alpha})`;
        ctx.lineWidth = link_line_width;

        ctx.beginPath();
        ctx.moveTo(bones[i].x, bones[i].y);
        ctx.lineTo(bones[j].x, bones[j].y);
        ctx.stroke();
        ctx.closePath();
      }
    }
  }
}

function getDisOf(b1: Bone, b2: Bone): number {
  const delta_x = Math.abs(b1.x - b2.x);
  const delta_y = Math.abs(b1.y - b2.y);

  return Math.sqrt(delta_x * delta_x + delta_y * delta_y);
}

function addBoneIfy(): void {
  if (bones.length < BONE_NUM) {
    bones.push(getRandomBone());
  }
}

function render(): void {
  ctx.clearRect(0, 0, can_w, can_h);

  renderBones();
  renderLines();
  updateBones();
  addBoneIfy();

  window.requestAnimationFrame(render);
}

function initBones(num: number): void {
  for (let i = 1; i <= num; i++) {
    bones.push({
      x: randomSidePos(can_w),
      y: randomSidePos(can_h),
      vx: getRandomSpeed('top')[0],
      vy: getRandomSpeed('top')[1],
      alpha: 1,
      phase: randomNumFrom(0, 10)
    });
  }
}

function initCanvas(): void {
  canvas.setAttribute('width', window.innerWidth.toString());
  canvas.setAttribute('height', window.innerHeight.toString());

  can_w = parseInt(canvas.getAttribute('width')!);
  can_h = parseInt(canvas.getAttribute('height')!);
}

window.addEventListener('resize', () => {
  console.log('Window Resize...');
  initCanvas();
});

function goMovie(): void {
  initCanvas();
  initBones(BONE_NUM);
  window.requestAnimationFrame(render);
}
goMovie();

canvas.addEventListener('mouseenter', () => {
  console.log('mouseenter');
  mouse_in = true;
  bones.push(mouse_bone);
});

canvas.addEventListener('mouseleave', () => {
  console.log('mouseleave');
  mouse_in = false;
  bones = bones.filter(b => !b.hasOwnProperty('type'));
});

canvas.addEventListener('mousemove', (e: MouseEvent) => {
  mouse_bone.x = e.pageX;
  mouse_bone.y = e.pageY;
});

</script>
<canvas id="nokey" class="absolute h-full max-w-full z-[-1]">
    Your Browser Don't Support Canvas, Please Download Chrome 
</canvas>
